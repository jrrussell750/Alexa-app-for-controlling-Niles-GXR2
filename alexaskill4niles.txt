This file provides details into the process for controlling a Nilex GXR2 with voice commands from Alexa.  It uses a Raspberry Pi as the interface between 
an Alexa skill and the GXR2.  The raspberry pi needs a standard load of raspbian buster with python installed.  Then, the alexaskill.py program from this 
repository needs to be downloaded to /home/pi directory on the raspberry pi.  The ngrok application needs to be installed and run in a dedicated terminal 
session to create a tunnel to the public network for connection to alexa.  An alexa skill needs to be built to allow voice commmands to be passed to the pi.  
A sample JSON file for that script is in a file called pi.json in this repository.

This project requires detailed knowledge over a number of disciplines, and has a medium level of complexity.  If you have no experience writing amazon 
skills, there is an excellent tutorial that you should complete at the following URL:

              https://tutorials-raspberrypi.com/develop-your-own-raspberry-pi-alexa-skill-and-control-pi-remotely/
              
In case the URL becomes stale, you can find the tutorial by searching for "Develop Your Own Raspberry Pi Alexa Skill and Control Pi Remotely."
              
Once you've completed the tutorial, you'll be ready to complete this project.  You will create a skill on the alexa server, then copy and paste the pi.json file 
from this repository into it.  You will download the alexaskill.py file from this repository and run it on the raspberry pi.  Finally, you'll establish a 
connection between the raspberrry pi and the amazon web services server.  At that point, you can install your skill using the web or your smart phone and
control it using any alexa capable device.

1.  Create an alexa skill

In this step, you create an alexa skill on the Amazon Web Services server.  There are several sub-steps to this step, and you need several things to make this work:

An amazon.com account
At least one Amazon echo device, or a cell phone with the Amazon alexa app installed.
Internet access
A device with a Web browser that is powerfull enough to interact with amazon consoles.
The pi.json file from this repository

a.  Log into the Alexa Skills Kit Developers Console (https://developer.amazon.com/alexa/console/ask).  You will be presented 
    with the skills menu page.  Please note: You can create an account for the the amazon site during the login process, if you don't
    already have one.
b.  Click on "Create Skill".  The "Create New Skill" page will display.
c.  Enter a name for your skill and verify that "Custom Model" is selected as the model to add to your skill.  Click 
    on the "Create Skill" button.  Alexa will create your skill.
d.  Navigate to the JSON editor under Interaction Model in the left menu pane of the console.  Delete the default JSON code
    in the editor.  
e.  Open the pi.json file in this repository.  Copy its contents and paste it into the JSON editor.
f.  Press the Save button on the json editor to save the code.  
g.  Go back to the skills menu page.  Your skill should be listed,
h.  Click on the "Copy Skill ID" link under your skill name in the list.  Your Skill ID will be copied to the clipboard.
i.  Open a text editor on your local machine and paste the Skill ID into it.
j.  Save the Skill ID file using a name you can remember (something like skillid.txt would work).

2.  Download the alexaskill.py program from this repository to the raspberry pi into the /home/pi directory and run it.

a.  From the raspberry pi, log into github and navigate to the Alexa-skill-for-Niles-GXR2 project page.
b.  locate the alexaskill.py file in the list of files and double click on it to open it.
c.  Click on the "Download Raw File" button in the upper right hand corner of the screen.  The file will download to the "Downloads" directory.
d.  Open the file manager on the raspberry pi and navigate to the Downloads directory.
e.  Move the alexaskill.py file from the Downloads directory to the /home/pi directory.
f.  Click on the raspberry icon in the upper left-hand corner of the screen and then select Programming from the menu that displays.
g.  Open a command line interface and enter the following command:
            python3 -m pip install Flask-Ask
            pip3 install --upgrade setuptools
            pip3 install 'cryptography<2.2'
            pip3 install Werkzeug==0.9.6
h.  From the programming menu, click on Thonny to select it. The Thonny development environment will display.
i.  From Thonny, click on "File" and then click on "Open" on the pop-up menu that displays.  The /home/pi directory will display.
j.  Double click on the alexaskill.py entry to select it.  Thonny will display the source code in the editor.
k.  Click on the run button to run the code.  The code will run.
l.  Verify that the code runs without errors.  If there are any errors, they are usually caused by missing or incorrectly loaded python packages.

3.  Establish a connection between the raspberry pi and amazon web services.  

    The raspberry pi needs to commmunicate with alexa over the network.  If you are familiar with networking, you already know that there are many ways to 
    to do this.   If that is the case, you can do this part on your own.  However, if you want a free and easy way to connect, you can use a service offered 
    by ngrok (www.ngrok.com).  They offer a basic tier that works well enough for a personal connection, and ngrok claims that it will be offered "free forever".
    I suggest you create a free account with them so that you can obtain an auth token that will allow you to stay connected indefinitely.  If you don't have
    the auth token your connection will time out after six hours.

a.  From your web browser, navigate to www.ngrok.com.  The ngrok home page will display.
b.  Click on the 

ngrok http --domain=multiply-pretty-reindeer.ngrok-free.app 80

Some interesting facts about the Niles GXR2::

1.  It has its own internal network, complete with DHCP server that issues leases in the range of 10.100.x.x/16.  Therefore, you can't directly connect 
it to your local area network unless you want to lose connectivity to the Internet.  Fortunately, Raspberry Pi 4s have both wired and wireless connections.  
Plug the wired port into the Niles GXR2 expansion port and let the GXR2 give it an IP address.  Connect the wireless port to your local area network and let it 
get its IP address from your local DHCP server.  This will work if you are not also using addresses for your local network that are in the range of 10.100.x.x/16.  
By the way, there is a detailed paper that explains how to get around this problem on the Internet.  Search for Niles Elan integration.  
(Please note that https://www.nilesaudio.com/sites/nilesaudio.com/files/_/techsupport/ICS-System-Support/niles-elan_gxr2_ethernet.pdf was a good URL 
when I was writing these notes)

2.  The 12 RJ45 female connectors for controllers have 12 volts on pins 7 and 8.  Therefore, it is not a good idea to plug anything but controllers into 
those connectors.  Also pins 4 and 5 are used for infrared connections.  Pins 1 and 2, 3 and 6 are standard Ethernet.  I have some more detailed notes 
on this in the niles protocol packets file in this directory.

